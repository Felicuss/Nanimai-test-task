# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import balance_pb2 as balance__pb2


class BalanceAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBalance = channel.unary_unary(
                '/balance.BalanceAPI/GetBalance',
                request_serializer=balance__pb2.GetBalanceRequest.SerializeToString,
                response_deserializer=balance__pb2.BalanceResponse.FromString,
                )
        self.AdjustLimits = channel.unary_unary(
                '/balance.BalanceAPI/AdjustLimits',
                request_serializer=balance__pb2.AdjustLimitsRequest.SerializeToString,
                response_deserializer=balance__pb2.BalanceResponse.FromString,
                )
        self.AdjustCurrent = channel.unary_unary(
                '/balance.BalanceAPI/AdjustCurrent',
                request_serializer=balance__pb2.AdjustCurrentRequest.SerializeToString,
                response_deserializer=balance__pb2.BalanceResponse.FromString,
                )
        self.OpenTransaction = channel.unary_unary(
                '/balance.BalanceAPI/OpenTransaction',
                request_serializer=balance__pb2.OpenTransactionRequest.SerializeToString,
                response_deserializer=balance__pb2.TransactionResponse.FromString,
                )
        self.ConfirmTransaction = channel.unary_unary(
                '/balance.BalanceAPI/ConfirmTransaction',
                request_serializer=balance__pb2.ConfirmTransactionRequest.SerializeToString,
                response_deserializer=balance__pb2.TransactionResponse.FromString,
                )
        self.CancelTransaction = channel.unary_unary(
                '/balance.BalanceAPI/CancelTransaction',
                request_serializer=balance__pb2.CancelTransactionRequest.SerializeToString,
                response_deserializer=balance__pb2.TransactionResponse.FromString,
                )


class BalanceAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustLimits(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdjustCurrent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BalanceAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=balance__pb2.GetBalanceRequest.FromString,
                    response_serializer=balance__pb2.BalanceResponse.SerializeToString,
            ),
            'AdjustLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustLimits,
                    request_deserializer=balance__pb2.AdjustLimitsRequest.FromString,
                    response_serializer=balance__pb2.BalanceResponse.SerializeToString,
            ),
            'AdjustCurrent': grpc.unary_unary_rpc_method_handler(
                    servicer.AdjustCurrent,
                    request_deserializer=balance__pb2.AdjustCurrentRequest.FromString,
                    response_serializer=balance__pb2.BalanceResponse.SerializeToString,
            ),
            'OpenTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenTransaction,
                    request_deserializer=balance__pb2.OpenTransactionRequest.FromString,
                    response_serializer=balance__pb2.TransactionResponse.SerializeToString,
            ),
            'ConfirmTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmTransaction,
                    request_deserializer=balance__pb2.ConfirmTransactionRequest.FromString,
                    response_serializer=balance__pb2.TransactionResponse.SerializeToString,
            ),
            'CancelTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTransaction,
                    request_deserializer=balance__pb2.CancelTransactionRequest.FromString,
                    response_serializer=balance__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'balance.BalanceAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BalanceAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/balance.BalanceAPI/GetBalance',
            balance__pb2.GetBalanceRequest.SerializeToString,
            balance__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdjustLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/balance.BalanceAPI/AdjustLimits',
            balance__pb2.AdjustLimitsRequest.SerializeToString,
            balance__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdjustCurrent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/balance.BalanceAPI/AdjustCurrent',
            balance__pb2.AdjustCurrentRequest.SerializeToString,
            balance__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OpenTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/balance.BalanceAPI/OpenTransaction',
            balance__pb2.OpenTransactionRequest.SerializeToString,
            balance__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/balance.BalanceAPI/ConfirmTransaction',
            balance__pb2.ConfirmTransactionRequest.SerializeToString,
            balance__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/balance.BalanceAPI/CancelTransaction',
            balance__pb2.CancelTransactionRequest.SerializeToString,
            balance__pb2.TransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
